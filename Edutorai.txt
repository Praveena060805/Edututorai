# -*- coding: utf-8 -*-
"""Edututorai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJyQLSRja4NS43TQtSJkHjvQLrqDsJ-5
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM


# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)


if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)


def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with different question types (multiple choice, true/false, short answer). At the end, provide all the answers in a separate ANSWERS section:"
    return generate_response(prompt, max_length=1000)


# Custom CSS for gradient and effects
custom_css = """
body {
    background: linear-gradient(135deg, #667eea, #764ba2);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: white;
}

h1 {
    text-align: center;
    font-weight: 700;
    background: -webkit-linear-gradient(45deg, #f3ec78, #af4261);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    margin-bottom: 2rem;
}

.gradio-container {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
}

.gr-btn {
    background: linear-gradient(45deg, #f3ec78, #af4261);
    border: none;
    color: white;
    font-weight: 600;
    box-shadow: 0 4px 15px 0 rgba(243, 236, 120, 0.75);
    transition: background 0.3s ease;
}

.gr-btn:hover {
    background: linear-gradient(45deg, #af4261, #f3ec78);
    box-shadow: 0 6px 20px 0 rgba(175, 66, 97, 0.85);
}

.gr-textbox textarea {
    background: rgba(255, 255, 255, 0.15);
    border-radius: 10px;
    color: white;
    font-size: 1rem;
    padding: 10px;
    border: 1px solid rgba(255,255,255,0.3);
    transition: border-color 0.3s ease;
}

.gr-textbox textarea:focus {
    border-color: #f3ec78;
    outline: none;
    box-shadow: 0 0 8px #f3ec78;
}

.gr-tab-item {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 15px;
    margin-top: 10px;
}
"""

# Create Gradio interface with custom CSS
with gr.Blocks(css=custom_css) as app:
    gr.Markdown("# Educational AI Assistant")

    with gr.Tabs():
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)

            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15)

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

app.launch(share=True)